package be.bugbounty.backend.controller.admin;

import be.bugbounty.backend.dto.admin.VulnerabilityTypeRequestDTO;
import be.bugbounty.backend.model.VulnerabilityType;
import be.bugbounty.backend.service.VulnerabilityService;
import org.springframework.http.*;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/admin/vulnerabilities")
@PreAuthorize("hasRole('ADMIN')")
public class AdminVulnerabilityController {

    private final VulnerabilityService service;

    public AdminVulnerabilityController(VulnerabilityService service) {
        this.service = service;
    }

    @GetMapping
    public ResponseEntity<List<VulnerabilityType>> getAll() {
        return ResponseEntity.ok(service.findAll());
    }

    @PostMapping
    public ResponseEntity<?> create(@RequestBody VulnerabilityTypeRequestDTO body) {
        try {
            VulnerabilityType created = service.create(body);
            return ResponseEntity.status(HttpStatus.CREATED).body(created);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(e.getMessage());
        }
    }

    @PatchMapping("/{id}")
    public ResponseEntity<?> update(@PathVariable Long id, @RequestBody VulnerabilityTypeRequestDTO body) {
        try {
            return ResponseEntity.ok(service.update(id, body));
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        service.delete(id);
        return ResponseEntity.noContent().build();
    }
}
