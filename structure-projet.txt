
Path                                                                              
----                                                                              
backend/src/main/java/be/bugbounty/backend/config/SecurityConfig.java             
backend/src/main/java/be/bugbounty/backend/controller/AuthController.java         
backend/src/main/java/be/bugbounty/backend/controller/ProgramPaymentController....
backend/src/main/java/be/bugbounty/backend/controller/UserController.java         
backend/src/main/java/be/bugbounty/backend/model/AuditProgram.java                
backend/src/main/java/be/bugbounty/backend/model/Badge.java                       
backend/src/main/java/be/bugbounty/backend/model/Challenge.java                   
backend/src/main/java/be/bugbounty/backend/model/ChallengeParticipant.java        
backend/src/main/java/be/bugbounty/backend/model/ChallengeParticipantId.java      
backend/src/main/java/be/bugbounty/backend/model/ForumMessage.java                
backend/src/main/java/be/bugbounty/backend/model/LoginRequest.java                
backend/src/main/java/be/bugbounty/backend/model/LoginResponse.java               
backend/src/main/java/be/bugbounty/backend/model/Notification.java                
backend/src/main/java/be/bugbounty/backend/model/ProgramPayment.java              
backend/src/main/java/be/bugbounty/backend/model/RegisterRequest.java             
backend/src/main/java/be/bugbounty/backend/model/Report.java                      
backend/src/main/java/be/bugbounty/backend/model/RewardPayment.java               
backend/src/main/java/be/bugbounty/backend/model/User.java                        
backend/src/main/java/be/bugbounty/backend/model/UserBadge.java                   
backend/src/main/java/be/bugbounty/backend/model/UserBadgeId.java                 
backend/src/main/java/be/bugbounty/backend/model/VulnerabilityType.java           
backend/src/main/java/be/bugbounty/backend/repository/ProgramPaymentRepository....
backend/src/main/java/be/bugbounty/backend/repository/UserRepository.java         
backend/src/main/java/be/bugbounty/backend/security/JwtAuthenticationFilter.java  
backend/src/main/java/be/bugbounty/backend/service/JwtService.java                
backend/src/main/java/be/bugbounty/backend/service/ProgramPaymentService.java     
frontend/src/app/core/auth/admin.guard.ts                                         
frontend/src/app/core/auth/auth.guard.ts                                          
frontend/src/app/core/auth/auth.service.ts                                        
frontend/src/app/core/auth/jwt.interceptor.ts                                     
frontend/src/app/core/http/auth.interceptor.service.ts                            
frontend/src/app/core/http/auth.interceptor.ts                                    
frontend/src/app/core/i18n/language.service.ts                                    
frontend/src/app/features/admin/admin.routes.ts                                   
frontend/src/app/features/auth/auth.routes.ts                                     
frontend/src/app/features/auth/login/login.component.css                          
frontend/src/app/features/auth/login/login.component.html                         
frontend/src/app/features/auth/login/login.component.spec.ts                      
frontend/src/app/features/auth/login/login.component.ts                           
frontend/src/app/features/auth/register/register.component.css                    
frontend/src/app/features/auth/register/register.component.html                   
frontend/src/app/features/auth/register/register.component.spec.ts                
frontend/src/app/features/auth/register/register.component.ts                     
frontend/src/app/features/challenges/challenges.routes.ts                         
frontend/src/app/features/dashboard/dashboard.component.css                       
frontend/src/app/features/dashboard/dashboard.component.html                      
frontend/src/app/features/dashboard/dashboard.component.spec.ts                   
frontend/src/app/features/dashboard/dashboard.component.ts                        
frontend/src/app/features/forum/forum.routes.ts                                   
frontend/src/app/features/legal/legal.routes.ts                                   
frontend/src/app/features/notifications/notifications.routes.ts                   
frontend/src/app/features/payments/payments.routes.ts                             
frontend/src/app/features/programs/programs.routes.ts                             
frontend/src/app/features/public/home/home.component.css                          
frontend/src/app/features/public/home/home.component.html                         
frontend/src/app/features/public/home/home.component.spec.ts                      
frontend/src/app/features/public/home/home.component.ts                           
frontend/src/app/features/reports/reports.routes.ts                               
frontend/src/app/features/rewards/rewards.routes.ts                               
frontend/src/app/features/users/users.routes.ts                                   
frontend/src/app/features/users/profile/profile.component.css                     
frontend/src/app/features/users/profile/profile.component.html                    
frontend/src/app/features/users/profile/profile.component.spec.ts                 
frontend/src/app/features/users/profile/profile.component.ts                      
frontend/src/app/features/users/settings/settings.component.css                   
frontend/src/app/features/users/settings/settings.component.html                  
frontend/src/app/features/users/settings/settings.component.spec.ts               
frontend/src/app/features/users/settings/settings.component.ts                    
frontend/src/app/layout/layout.component.css                                      
frontend/src/app/layout/layout.component.html                                     
frontend/src/app/layout/layout.component.spec.ts                                  
frontend/src/app/layout/layout.component.ts                                       
frontend/src/app/layout/footer/footer.component.css                               
frontend/src/app/layout/footer/footer.component.html                              
frontend/src/app/layout/footer/footer.component.spec.ts                           
frontend/src/app/layout/footer/footer.component.ts                                
frontend/src/app/layout/header/header.component.css                               
frontend/src/app/layout/header/header.component.html                              
frontend/src/app/layout/header/header.component.spec.ts                           
frontend/src/app/layout/header/header.component.ts                                
frontend/src/app/layout/sidebar/sidebar.component.css                             
frontend/src/app/layout/sidebar/sidebar.component.html                            
frontend/src/app/layout/sidebar/sidebar.component.spec.ts                         
frontend/src/app/layout/sidebar/sidebar.component.ts                              
frontend/src/app/models/challenge.model.ts                                        
frontend/src/app/models/payment.model.ts                                          
frontend/src/app/models/program.model.ts                                          
frontend/src/app/models/report.model.ts                                           
frontend/src/app/models/user.model.ts                                             
frontend/src/app/shared/pipes/date-format.pipe.ts                                 
frontend/src/app/shared/pipes/username.pipe.ts                                    




🔐 Authentification basée sur JWT (stateless)
Le projet utilise une architecture Angular (frontend) + Spring Boot (backend), avec authentification sécurisée via JWT :

✅ Fonctionnement côté backend (Spring Boot)
Inscription (/api/auth/register)

L’utilisateur s’inscrit avec email, mot de passe, prénom, nom

Le mot de passe est haché avec BCrypt

Les données sont enregistrées en base de données

Connexion (/api/auth/signin)

L’utilisateur envoie email + mot de passe

Si le mot de passe correspond, un token JWT est généré

Le token contient : email, id, rôle, expiration (24h)

Sécurisation des routes

Toutes les routes /api/auth/** sont publiques

Toutes les autres sont protégées

Le token est vérifié par un filtre JwtAuthenticationFilter à chaque requête

Si le token est valide : le User est injecté dans le SecurityContext

✅ Fonctionnement côté frontend (Angular)
Stockage du token

Après connexion, le JWT est stocké dans localStorage

Il est également mis dans un signal() via AuthService

Injection automatique

Un HttpInterceptor (JwtInterceptor) ajoute le header :

makefile
Copier
Modifier
Authorization: Bearer <token>
Cela se fait automatiquement à chaque appel HttpClient

Protection des routes

Un authGuard empêche l’accès à des routes comme /dashboard, /profile, etc.

Si l’utilisateur n’a pas de token : redirection vers /login

Affichage conditionnel

Le layout affiche ou cache des liens (ex: "Déconnexion") selon authService.getToken()

🧪 Test via /api/user/me
Une route sécurisée permet de tester le filtre JWT

Elle retourne les données de l’utilisateur connecté si le token est valide

✅ En résumé
Élément	Sécurité
Authentification	JWT stateless
Hash password	BCrypt
Routing Angular	Guards (authGuard)
Backend	JwtAuthenticationFilter, SecurityConfig
Frontend	Interceptor, Guard, Token Signal